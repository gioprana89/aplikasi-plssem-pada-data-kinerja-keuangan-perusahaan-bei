shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
dat <- read.table("dat.txt", header = T, sep = "\t")
dat
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5 + KM6
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
dat <- read.table("dat.txt", header = T, sep = "\t")
dat
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5 + KM6
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
library(lavaan)
modindices(hasil_cfa, minimum.value = 10, sort = TRUE)
goodness_of_fit = lavaan::fitMeasures(hasil_cfa, c("pvalue","rmsea","nfi","cfi","nnfi","tli","srmr") )
print(goodness_of_fit)
library(semPlot)
semPaths(hasil_cfa,"Standardized","Estimates")
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5 + KM6
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
library(semPlot)
semPaths(hasil_cfa,"Standardized")
semPaths(hasil_cfa,"model","est",style="lisrel")
semPaths(hasil_cfa,"model","standardized",style="lisrel")
semPaths(hasil_cfa,"Standardized", layout = "spring")
dat <- read.table("dat.txt", header = T, sep = "\t")
dat
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5 + KM6
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
semPaths(hasil_cfa,"Standardized", layout = "spring")
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
semPaths(hasil_cfa,"Standardized", layout = "spring")
goodness_of_fit = lavaan::fitMeasures(hasil_cfa, c("pvalue","rmsea","nfi","cfi","nnfi","tli","srmr") )
print(goodness_of_fit)
dat <- read.table("dat.txt", header = T, sep = "\t")
dat
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5 + KM6
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
data_cetak <- as.data.frame(ringkasan_hasil_cfa)
data_cetak
wb <- openxlsx::createWorkbook()
hs1 <- openxlsx::createStyle(fgFill = "#DCE6F1", halign = "CENTER", textDecoration = "italic",
border = "Bottom")
hs2 <- openxlsx::createStyle(fontColour = "#ffffff", fgFill = "#4F80BD",
halign = "center", valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight")
openxlsx::addWorksheet(wb, "Hasil CFA", gridLines = TRUE)
openxlsx::writeDataTable(wb, "Hasil CFA", data_cetak, rowNames = TRUE, startRow = 2, startCol = 2, tableStyle = "TableStyleMedium21")
openxlsx::openXL(wb)
model_cfa <-'
EC =~ EC1 + EC2
BC =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5
BK =~ EC + BC + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
data_cetak <- as.data.frame(ringkasan_hasil_cfa)
data_cetak
wb <- openxlsx::createWorkbook()
hs1 <- openxlsx::createStyle(fgFill = "#DCE6F1", halign = "CENTER", textDecoration = "italic",
border = "Bottom")
hs2 <- openxlsx::createStyle(fontColour = "#ffffff", fgFill = "#4F80BD",
halign = "center", valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight")
openxlsx::addWorksheet(wb, "Hasil CFA", gridLines = TRUE)
openxlsx::writeDataTable(wb, "Hasil CFA", data_cetak, rowNames = TRUE, startRow = 2, startCol = 2, tableStyle = "TableStyleMedium21")
openxlsx::openXL(wb)
model_cfa <-'
EC =~ EC1 + EC2
BS =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5 + KM6
BK =~ EC + BS + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
model_cfa <-'
EC =~ EC1 + EC2
BS =~ BS1 + BS2
I =~ I1 + I2
AC =~ AC1 + AC2
ST =~ ST1 + ST2
DW =~ DW1 + DW2 + DW3 + DW4
EM =~ EM1 + EM2
KM =~ KM1 + KM2 + KM3 + KM4 + KM5
BK =~ EC + BS + I + AC + ST
K =~ DW + EM + KM
'
hasil_cfa <- lavaan::cfa(model_cfa, data = dat, auto.var=TRUE, auto.fix.first=TRUE)
ringkasan_hasil_cfa = lavaan::standardizedSolution(hasil_cfa)
print(ringkasan_hasil_cfa)
shiny::runApp('C:/STATCAL')
shiny::runApp('C:/STATCAL')
list.files()
dat <- read.table("dat.txt", header = T, sep = "\t")
dat
model_pengukuran <- constructs(
composite("PEU", multi_items("PEU", 1:5)),
composite("SS", multi_items("SS", 1:5)),
composite("PU", multi_items("PU", 1:5)),
composite("GQ", multi_items("GQ", 1:5)),
composite("TA", multi_items("TA", 1:5)),
composite("SEI", multi_items("SEI", 1:5)))
library(seminr)
library(readxl)
library(openxlsx)
model_pengukuran <- constructs(
composite("PEU", multi_items("PEU", 1:5)),
composite("SS", multi_items("SS", 1:5)),
composite("PU", multi_items("PU", 1:5)),
composite("GQ", multi_items("GQ", 1:5)),
composite("TA", multi_items("TA", 1:5)),
composite("SEI", multi_items("SEI", 1:5)))
model_struktural <- relationships(paths(from="PEU",
to=c("GQ")),
paths(from="SS",
to=c("GQ")),
paths(from="PU",
to=c("GQ")),
paths(from="GQ",
to=c("TA","SEI")),
paths(from="TA",
to=c("SEI"))
)
hasil_PLS <- estimate_pls(data = dat,
measurement_model = model_pengukuran,
structural_model  = model_struktural,
inner_weights = path_weighting,
missing = mean_replacement,
missing_value = "-99")
## Generating the seminr model
## All 344 observations are valid.
ringkasan_hasil_PLS <- summary(hasil_PLS)
ringkasan_hasil_PLS
ringkasan_hasil_PLS$validity$htmt
cetak_outer_loading <- ringkasan_hasil_PLS$loadings
cetak_outer_loading
ringkasan_hasil_PLS$reliability
cetak_reliabilitas <- ringkasan_hasil_PLS$reliability
cetak_reliabilitas
ringkasan_hasil_PLS$paths
ringkasan_hasil_PLS$fSquare
plot(model_struktural)
ringkasan_hasil_PLS$paths
plot(hasil_PLS)
Copyboot_corp_rep <- bootstrap_model(seminr_model = hasil_PLS,
nboot = 1000,
cores = NULL,
seed = 123)
## Bootstrapping model using seminr...
## SEMinR Model successfully bootstrapped
sum_boot_corp_rep <- summary(Copyboot_corp_rep)
sum_boot_corp_rep$bootstrapped_paths
PEU_GQ_SEI <- specific_effect_significance(boot_seminr_model = Copyboot_corp_rep,
from = "PEU",
through = "GQ",
to = "SEI",
alpha = 0.05)
print(PEU_GQ_SEI)
SS_GQ_SEI <- specific_effect_significance(boot_seminr_model = Copyboot_corp_rep,
from = "SS",
through = "GQ",
to = "SEI",
alpha = 0.05)
print(SS_GQ_SEI)
PU_GQ_SEI <- specific_effect_significance(boot_seminr_model = Copyboot_corp_rep,
from = "PU",
through = "GQ",
to = "SEI",
alpha = 0.05)
print(PU_GQ_SEI)
GQ_TA_SEI <- specific_effect_significance(boot_seminr_model = Copyboot_corp_rep,
from = "GQ",
through = "TA",
to = "SEI",
alpha = 0.05)
print(GQ_TA_SEI)
shiny::runApp('C:/STATCAL')
install.packages("rhandsontable")
runApp('C:/STATCAL')
install.packages("shinyAce")
runApp('C:/STATCAL')
runApp('C:/STATCAL')
shiny::runApp('D:/WEBSITE/PRANAUGI.COM/PENELUSURAN LITERATUR/Aplikasi PLS SEM pada Data Kinerja Keuangan pada Perusahaan yang Terdaftar di BEI/aplikasi shiny/myapp')
setwd("D:/WEBSITE/PRANAUGI.COM/PENELUSURAN LITERATUR/Aplikasi PLS SEM pada Data Kinerja Keuangan pada Perusahaan yang Terdaftar di BEI/aplikasi shiny")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
